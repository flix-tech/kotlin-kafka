[{"name":"All(\"all\")","description":"com.github.nomisRev.kafka.Acks.All","location":"-kotlin-kafka/com.github.nomisRev.kafka/-acks/-all/index.html","searchKeys":["All","All(\"all\")","com.github.nomisRev.kafka.Acks.All"]},{"name":"Earliest(\"earliest\")","description":"com.github.nomisRev.kafka.AutoOffsetReset.Earliest","location":"-kotlin-kafka/com.github.nomisRev.kafka/-auto-offset-reset/-earliest/index.html","searchKeys":["Earliest","Earliest(\"earliest\")","com.github.nomisRev.kafka.AutoOffsetReset.Earliest"]},{"name":"Latest(\"latest\")","description":"com.github.nomisRev.kafka.AutoOffsetReset.Latest","location":"-kotlin-kafka/com.github.nomisRev.kafka/-auto-offset-reset/-latest/index.html","searchKeys":["Latest","Latest(\"latest\")","com.github.nomisRev.kafka.AutoOffsetReset.Latest"]},{"name":"MinusOne(\"-1\")","description":"com.github.nomisRev.kafka.Acks.MinusOne","location":"-kotlin-kafka/com.github.nomisRev.kafka/-acks/-minus-one/index.html","searchKeys":["MinusOne","MinusOne(\"-1\")","com.github.nomisRev.kafka.Acks.MinusOne"]},{"name":"None(\"none\")","description":"com.github.nomisRev.kafka.AutoOffsetReset.None","location":"-kotlin-kafka/com.github.nomisRev.kafka/-auto-offset-reset/-none/index.html","searchKeys":["None","None(\"none\")","com.github.nomisRev.kafka.AutoOffsetReset.None"]},{"name":"One(\"1\")","description":"com.github.nomisRev.kafka.Acks.One","location":"-kotlin-kafka/com.github.nomisRev.kafka/-acks/-one/index.html","searchKeys":["One","One(\"1\")","com.github.nomisRev.kafka.Acks.One"]},{"name":"Zero(\"0\")","description":"com.github.nomisRev.kafka.Acks.Zero","location":"-kotlin-kafka/com.github.nomisRev.kafka/-acks/-zero/index.html","searchKeys":["Zero","Zero(\"0\")","com.github.nomisRev.kafka.Acks.Zero"]},{"name":"data class AdminSettings(bootStrapServer: String, props: Properties?)","description":"com.github.nomisRev.kafka.AdminSettings","location":"-kotlin-kafka/com.github.nomisRev.kafka/-admin-settings/index.html","searchKeys":["AdminSettings","data class AdminSettings(bootStrapServer: String, props: Properties?)","com.github.nomisRev.kafka.AdminSettings"]},{"name":"data class ConsumerSettings<K, V>(bootstrapServers: String, keyDeserializer: Deserializer<K>, valueDeserializer: Deserializer<V>, groupId: String, clientDnsLookup: ClientDnsLookup, sessionTimeOut: Duration, heartbeatInterval: Duration, autoOffsetReset: AutoOffsetReset, partitionAssignmentStrategy: List<Class<*>>, metadataMaxAge: Long, enableAutoCommit: Boolean, autoCommitInterval: Duration, clientId: String, maxPartitionFetchBytes: Int, sendBuffer: Int, receiveBuffer: Int, fetchMinBytes: Int, fetchMaxBytes: Int, fetchMaxWait: Duration, reconnectBackoff: Duration, reconnectBackoffMax: Duration, retryBackoff: Duration, checkCrcs: Boolean, metricsSampleWindow: Duration, metricsNumSamples: Int, metricsRecordingLevel: Sensor.RecordingLevel, metricsReporterClasses: List<Class<*>>, requestTimeout: Duration, defaultApiTimeout: Duration, connectionsMaxIdle: Duration, interceptorClasses: List<Class<*>>, maxPollRecords: Int, maxPollInterval: Duration, excludeInternalTopics: Boolean, properties: Properties?)","description":"com.github.nomisRev.kafka.ConsumerSettings","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/index.html","searchKeys":["ConsumerSettings","data class ConsumerSettings<K, V>(bootstrapServers: String, keyDeserializer: Deserializer<K>, valueDeserializer: Deserializer<V>, groupId: String, clientDnsLookup: ClientDnsLookup, sessionTimeOut: Duration, heartbeatInterval: Duration, autoOffsetReset: AutoOffsetReset, partitionAssignmentStrategy: List<Class<*>>, metadataMaxAge: Long, enableAutoCommit: Boolean, autoCommitInterval: Duration, clientId: String, maxPartitionFetchBytes: Int, sendBuffer: Int, receiveBuffer: Int, fetchMinBytes: Int, fetchMaxBytes: Int, fetchMaxWait: Duration, reconnectBackoff: Duration, reconnectBackoffMax: Duration, retryBackoff: Duration, checkCrcs: Boolean, metricsSampleWindow: Duration, metricsNumSamples: Int, metricsRecordingLevel: Sensor.RecordingLevel, metricsReporterClasses: List<Class<*>>, requestTimeout: Duration, defaultApiTimeout: Duration, connectionsMaxIdle: Duration, interceptorClasses: List<Class<*>>, maxPollRecords: Int, maxPollInterval: Duration, excludeInternalTopics: Boolean, properties: Properties?)","com.github.nomisRev.kafka.ConsumerSettings"]},{"name":"data class ProducerSettings<K, V>(bootstrapServers: String, keyDeserializer: Serializer<K>, valueDeserializer: Serializer<V>, acks: Acks)","description":"com.github.nomisRev.kafka.ProducerSettings","location":"-kotlin-kafka/com.github.nomisRev.kafka/-producer-settings/index.html","searchKeys":["ProducerSettings","data class ProducerSettings<K, V>(bootstrapServers: String, keyDeserializer: Serializer<K>, valueDeserializer: Serializer<V>, acks: Acks)","com.github.nomisRev.kafka.ProducerSettings"]},{"name":"enum Acks : Enum<Acks> ","description":"com.github.nomisRev.kafka.Acks","location":"-kotlin-kafka/com.github.nomisRev.kafka/-acks/index.html","searchKeys":["Acks","enum Acks : Enum<Acks> ","com.github.nomisRev.kafka.Acks"]},{"name":"enum AutoOffsetReset : Enum<AutoOffsetReset> ","description":"com.github.nomisRev.kafka.AutoOffsetReset","location":"-kotlin-kafka/com.github.nomisRev.kafka/-auto-offset-reset/index.html","searchKeys":["AutoOffsetReset","enum AutoOffsetReset : Enum<AutoOffsetReset> ","com.github.nomisRev.kafka.AutoOffsetReset"]},{"name":"fun <K, V> ConsumerSettings(bootstrapServers: String, keyDeserializer: Deserializer<K>, valueDeserializer: Deserializer<V>, groupId: String, clientDnsLookup: ClientDnsLookup = ClientDnsLookup.USE_ALL_DNS_IPS, sessionTimeOut: Duration = Duration.ofMillis(10000), heartbeatInterval: Duration = Duration.ofMillis(3000), autoOffsetReset: AutoOffsetReset = AutoOffsetReset.Latest, partitionAssignmentStrategy: List<Class<*>> = listOf(RangeAssignor::class.java), metadataMaxAge: Long = (5 * 60 * 1000).toLong(), enableAutoCommit: Boolean = true, autoCommitInterval: Duration = Duration.ofMillis(5000), clientId: String = \"\", maxPartitionFetchBytes: Int = DEFAULT_MAX_PARTITION_FETCH_BYTES, sendBuffer: Int = 128 * 1024, receiveBuffer: Int = 64 * 1024, fetchMinBytes: Int = 1, fetchMaxBytes: Int = ConsumerConfig.DEFAULT_FETCH_MAX_BYTES, fetchMaxWait: Duration = Duration.ofMillis(500), reconnectBackoff: Duration = Duration.ofMillis(50L), reconnectBackoffMax: Duration = Duration.ofMillis(1000), retryBackoff: Duration = Duration.ofMillis(100), checkCrcs: Boolean = true, metricsSampleWindow: Duration = Duration.ofMillis(30000), metricsNumSamples: Int = 2, metricsRecordingLevel: Sensor.RecordingLevel = Sensor.RecordingLevel.INFO, metricsReporterClasses: List<Class<*>> = emptyList(), requestTimeout: Duration = Duration.ofMillis(30000), defaultApiTimeout: Duration = Duration.ofMillis(60 * 1000), connectionsMaxIdle: Duration = Duration.ofMillis(9 * 60 * 1000), interceptorClasses: List<Class<*>> = emptyList(), maxPollRecords: Int = 500, maxPollInterval: Duration = Duration.ofMillis(300000), excludeInternalTopics: Boolean = ConsumerConfig.DEFAULT_EXCLUDE_INTERNAL_TOPICS, properties: Properties? = null)","description":"com.github.nomisRev.kafka.ConsumerSettings.ConsumerSettings","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/-consumer-settings.html","searchKeys":["ConsumerSettings","fun <K, V> ConsumerSettings(bootstrapServers: String, keyDeserializer: Deserializer<K>, valueDeserializer: Deserializer<V>, groupId: String, clientDnsLookup: ClientDnsLookup = ClientDnsLookup.USE_ALL_DNS_IPS, sessionTimeOut: Duration = Duration.ofMillis(10000), heartbeatInterval: Duration = Duration.ofMillis(3000), autoOffsetReset: AutoOffsetReset = AutoOffsetReset.Latest, partitionAssignmentStrategy: List<Class<*>> = listOf(RangeAssignor::class.java), metadataMaxAge: Long = (5 * 60 * 1000).toLong(), enableAutoCommit: Boolean = true, autoCommitInterval: Duration = Duration.ofMillis(5000), clientId: String = \"\", maxPartitionFetchBytes: Int = DEFAULT_MAX_PARTITION_FETCH_BYTES, sendBuffer: Int = 128 * 1024, receiveBuffer: Int = 64 * 1024, fetchMinBytes: Int = 1, fetchMaxBytes: Int = ConsumerConfig.DEFAULT_FETCH_MAX_BYTES, fetchMaxWait: Duration = Duration.ofMillis(500), reconnectBackoff: Duration = Duration.ofMillis(50L), reconnectBackoffMax: Duration = Duration.ofMillis(1000), retryBackoff: Duration = Duration.ofMillis(100), checkCrcs: Boolean = true, metricsSampleWindow: Duration = Duration.ofMillis(30000), metricsNumSamples: Int = 2, metricsRecordingLevel: Sensor.RecordingLevel = Sensor.RecordingLevel.INFO, metricsReporterClasses: List<Class<*>> = emptyList(), requestTimeout: Duration = Duration.ofMillis(30000), defaultApiTimeout: Duration = Duration.ofMillis(60 * 1000), connectionsMaxIdle: Duration = Duration.ofMillis(9 * 60 * 1000), interceptorClasses: List<Class<*>> = emptyList(), maxPollRecords: Int = 500, maxPollInterval: Duration = Duration.ofMillis(300000), excludeInternalTopics: Boolean = ConsumerConfig.DEFAULT_EXCLUDE_INTERNAL_TOPICS, properties: Properties? = null)","com.github.nomisRev.kafka.ConsumerSettings.ConsumerSettings"]},{"name":"fun <K, V> Flow<KafkaConsumer<K, V>>.subscribeTo(name: String, listener: ConsumerRebalanceListener = NoOpConsumerRebalanceListener(), timeout: Duration = Duration.ofMillis(500)): Flow<ConsumerRecord<K, V>>","description":"com.github.nomisRev.kafka.subscribeTo","location":"-kotlin-kafka/com.github.nomisRev.kafka/subscribe-to.html","searchKeys":["subscribeTo","fun <K, V> Flow<KafkaConsumer<K, V>>.subscribeTo(name: String, listener: ConsumerRebalanceListener = NoOpConsumerRebalanceListener(), timeout: Duration = Duration.ofMillis(500)): Flow<ConsumerRecord<K, V>>","com.github.nomisRev.kafka.subscribeTo"]},{"name":"fun <K, V> ProducerSettings(bootstrapServers: String, keyDeserializer: Serializer<K>, valueDeserializer: Serializer<V>, acks: Acks = Acks.One)","description":"com.github.nomisRev.kafka.ProducerSettings.ProducerSettings","location":"-kotlin-kafka/com.github.nomisRev.kafka/-producer-settings/-producer-settings.html","searchKeys":["ProducerSettings","fun <K, V> ProducerSettings(bootstrapServers: String, keyDeserializer: Serializer<K>, valueDeserializer: Serializer<V>, acks: Acks = Acks.One)","com.github.nomisRev.kafka.ProducerSettings.ProducerSettings"]},{"name":"fun <K, V> kafkaConsumer(settings: ConsumerSettings<K, V>): Flow<KafkaConsumer<K, V>>","description":"com.github.nomisRev.kafka.kafkaConsumer","location":"-kotlin-kafka/com.github.nomisRev.kafka/kafka-consumer.html","searchKeys":["kafkaConsumer","fun <K, V> kafkaConsumer(settings: ConsumerSettings<K, V>): Flow<KafkaConsumer<K, V>>","com.github.nomisRev.kafka.kafkaConsumer"]},{"name":"fun <K, V> kafkaProducer(props: Properties, keyDeserializer: Serializer<K>, valueDeserializer: Serializer<V>): Flow<KafkaProducer<K, V>>","description":"com.github.nomisRev.kafka.kafkaProducer","location":"-kotlin-kafka/com.github.nomisRev.kafka/kafka-producer.html","searchKeys":["kafkaProducer","fun <K, V> kafkaProducer(props: Properties, keyDeserializer: Serializer<K>, valueDeserializer: Serializer<V>): Flow<KafkaProducer<K, V>>","com.github.nomisRev.kafka.kafkaProducer"]},{"name":"fun <T> KafkaFuture<T>.asDeferred(): Deferred<T>","description":"com.github.nomisRev.kafka.asDeferred","location":"-kotlin-kafka/com.github.nomisRev.kafka/as-deferred.html","searchKeys":["asDeferred","fun <T> KafkaFuture<T>.asDeferred(): Deferred<T>","com.github.nomisRev.kafka.asDeferred"]},{"name":"fun AdminSettings(bootStrapServer: String, props: Properties? = null)","description":"com.github.nomisRev.kafka.AdminSettings.AdminSettings","location":"-kotlin-kafka/com.github.nomisRev.kafka/-admin-settings/-admin-settings.html","searchKeys":["AdminSettings","fun AdminSettings(bootStrapServer: String, props: Properties? = null)","com.github.nomisRev.kafka.AdminSettings.AdminSettings"]},{"name":"fun adminClient(settings: AdminSettings): Resource<AdminClient>","description":"com.github.nomisRev.kafka.adminClient","location":"-kotlin-kafka/com.github.nomisRev.kafka/admin-client.html","searchKeys":["adminClient","fun adminClient(settings: AdminSettings): Resource<AdminClient>","com.github.nomisRev.kafka.adminClient"]},{"name":"fun kafkaProducer(): Flow<KafkaProducer<K, V>>","description":"com.github.nomisRev.kafka.ProducerSettings.kafkaProducer","location":"-kotlin-kafka/com.github.nomisRev.kafka/-producer-settings/kafka-producer.html","searchKeys":["kafkaProducer","fun kafkaProducer(): Flow<KafkaProducer<K, V>>","com.github.nomisRev.kafka.ProducerSettings.kafkaProducer"]},{"name":"fun properties(): Properties","description":"com.github.nomisRev.kafka.AdminSettings.properties","location":"-kotlin-kafka/com.github.nomisRev.kafka/-admin-settings/properties.html","searchKeys":["properties","fun properties(): Properties","com.github.nomisRev.kafka.AdminSettings.properties"]},{"name":"fun properties(): Properties","description":"com.github.nomisRev.kafka.ConsumerSettings.properties","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/properties.html","searchKeys":["properties","fun properties(): Properties","com.github.nomisRev.kafka.ConsumerSettings.properties"]},{"name":"fun properties(): Properties","description":"com.github.nomisRev.kafka.ProducerSettings.properties","location":"-kotlin-kafka/com.github.nomisRev.kafka/-producer-settings/properties.html","searchKeys":["properties","fun properties(): Properties","com.github.nomisRev.kafka.ProducerSettings.properties"]},{"name":"object NothingDeserializer : Deserializer<Nothing> ","description":"com.github.nomisRev.kafka.NothingDeserializer","location":"-kotlin-kafka/com.github.nomisRev.kafka/-nothing-deserializer/index.html","searchKeys":["NothingDeserializer","object NothingDeserializer : Deserializer<Nothing> ","com.github.nomisRev.kafka.NothingDeserializer"]},{"name":"object NothingSerializer : Serializer<Nothing> ","description":"com.github.nomisRev.kafka.NothingSerializer","location":"-kotlin-kafka/com.github.nomisRev.kafka/-nothing-serializer/index.html","searchKeys":["NothingSerializer","object NothingSerializer : Serializer<Nothing> ","com.github.nomisRev.kafka.NothingSerializer"]},{"name":"open override fun close()","description":"com.github.nomisRev.kafka.NothingDeserializer.close","location":"-kotlin-kafka/com.github.nomisRev.kafka/-nothing-deserializer/close.html","searchKeys":["close","open override fun close()","com.github.nomisRev.kafka.NothingDeserializer.close"]},{"name":"open override fun close()","description":"com.github.nomisRev.kafka.NothingSerializer.close","location":"-kotlin-kafka/com.github.nomisRev.kafka/-nothing-serializer/close.html","searchKeys":["close","open override fun close()","com.github.nomisRev.kafka.NothingSerializer.close"]},{"name":"open override fun configure(configs: MutableMap<String, *>?, isKey: Boolean)","description":"com.github.nomisRev.kafka.NothingDeserializer.configure","location":"-kotlin-kafka/com.github.nomisRev.kafka/-nothing-deserializer/configure.html","searchKeys":["configure","open override fun configure(configs: MutableMap<String, *>?, isKey: Boolean)","com.github.nomisRev.kafka.NothingDeserializer.configure"]},{"name":"open override fun configure(configs: MutableMap<String, *>?, isKey: Boolean)","description":"com.github.nomisRev.kafka.NothingSerializer.configure","location":"-kotlin-kafka/com.github.nomisRev.kafka/-nothing-serializer/configure.html","searchKeys":["configure","open override fun configure(configs: MutableMap<String, *>?, isKey: Boolean)","com.github.nomisRev.kafka.NothingSerializer.configure"]},{"name":"open override fun deserialize(topic: String?, data: ByteArray?): Nothing","description":"com.github.nomisRev.kafka.NothingDeserializer.deserialize","location":"-kotlin-kafka/com.github.nomisRev.kafka/-nothing-deserializer/deserialize.html","searchKeys":["deserialize","open override fun deserialize(topic: String?, data: ByteArray?): Nothing","com.github.nomisRev.kafka.NothingDeserializer.deserialize"]},{"name":"open override fun serialize(topic: String?, data: Nothing?): ByteArray","description":"com.github.nomisRev.kafka.NothingSerializer.serialize","location":"-kotlin-kafka/com.github.nomisRev.kafka/-nothing-serializer/serialize.html","searchKeys":["serialize","open override fun serialize(topic: String?, data: Nothing?): ByteArray","com.github.nomisRev.kafka.NothingSerializer.serialize"]},{"name":"suspend fun <A, B> Flow<ProducerRecord<A, B>>.produce(settings: ProducerSettings<A, B>): Flow<RecordMetadata>","description":"com.github.nomisRev.kafka.produce","location":"-kotlin-kafka/com.github.nomisRev.kafka/produce.html","searchKeys":["produce","suspend fun <A, B> Flow<ProducerRecord<A, B>>.produce(settings: ProducerSettings<A, B>): Flow<RecordMetadata>","com.github.nomisRev.kafka.produce"]},{"name":"suspend fun <A, B> KafkaProducer<A, B>.sendAwait(record: ProducerRecord<A, B>): RecordMetadata","description":"com.github.nomisRev.kafka.sendAwait","location":"-kotlin-kafka/com.github.nomisRev.kafka/send-await.html","searchKeys":["sendAwait","suspend fun <A, B> KafkaProducer<A, B>.sendAwait(record: ProducerRecord<A, B>): RecordMetadata","com.github.nomisRev.kafka.sendAwait"]},{"name":"suspend fun <T> KafkaFuture<T>.await(): T","description":"com.github.nomisRev.kafka.await","location":"-kotlin-kafka/com.github.nomisRev.kafka/await.html","searchKeys":["await","suspend fun <T> KafkaFuture<T>.await(): T","com.github.nomisRev.kafka.await"]},{"name":"suspend fun AdminClient.createTopic(topic: NewTopic, option: CreateTopicsOptions = CreateTopicsOptions())","description":"com.github.nomisRev.kafka.createTopic","location":"-kotlin-kafka/com.github.nomisRev.kafka/create-topic.html","searchKeys":["createTopic","suspend fun AdminClient.createTopic(topic: NewTopic, option: CreateTopicsOptions = CreateTopicsOptions())","com.github.nomisRev.kafka.createTopic"]},{"name":"suspend fun AdminClient.deleteTopic(name: String, options: DeleteTopicsOptions = DeleteTopicsOptions()): DeleteTopicsResult","description":"com.github.nomisRev.kafka.deleteTopic","location":"-kotlin-kafka/com.github.nomisRev.kafka/delete-topic.html","searchKeys":["deleteTopic","suspend fun AdminClient.deleteTopic(name: String, options: DeleteTopicsOptions = DeleteTopicsOptions()): DeleteTopicsResult","com.github.nomisRev.kafka.deleteTopic"]},{"name":"suspend fun AdminClient.describeTopic(name: String, options: DescribeTopicsOptions = DescribeTopicsOptions()): TopicDescription?","description":"com.github.nomisRev.kafka.describeTopic","location":"-kotlin-kafka/com.github.nomisRev.kafka/describe-topic.html","searchKeys":["describeTopic","suspend fun AdminClient.describeTopic(name: String, options: DescribeTopicsOptions = DescribeTopicsOptions()): TopicDescription?","com.github.nomisRev.kafka.describeTopic"]},{"name":"suspend fun CreateTopicsResult.await()","description":"com.github.nomisRev.kafka.await","location":"-kotlin-kafka/com.github.nomisRev.kafka/await.html","searchKeys":["await","suspend fun CreateTopicsResult.await()","com.github.nomisRev.kafka.await"]},{"name":"suspend fun DeleteTopicsResult.await()","description":"com.github.nomisRev.kafka.await","location":"-kotlin-kafka/com.github.nomisRev.kafka/await.html","searchKeys":["await","suspend fun DeleteTopicsResult.await()","com.github.nomisRev.kafka.await"]},{"name":"val acks: Acks","description":"com.github.nomisRev.kafka.ProducerSettings.acks","location":"-kotlin-kafka/com.github.nomisRev.kafka/-producer-settings/acks.html","searchKeys":["acks","val acks: Acks","com.github.nomisRev.kafka.ProducerSettings.acks"]},{"name":"val autoCommitInterval: Duration","description":"com.github.nomisRev.kafka.ConsumerSettings.autoCommitInterval","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/auto-commit-interval.html","searchKeys":["autoCommitInterval","val autoCommitInterval: Duration","com.github.nomisRev.kafka.ConsumerSettings.autoCommitInterval"]},{"name":"val autoOffsetReset: AutoOffsetReset","description":"com.github.nomisRev.kafka.ConsumerSettings.autoOffsetReset","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/auto-offset-reset.html","searchKeys":["autoOffsetReset","val autoOffsetReset: AutoOffsetReset","com.github.nomisRev.kafka.ConsumerSettings.autoOffsetReset"]},{"name":"val bootStrapServer: String","description":"com.github.nomisRev.kafka.AdminSettings.bootStrapServer","location":"-kotlin-kafka/com.github.nomisRev.kafka/-admin-settings/boot-strap-server.html","searchKeys":["bootStrapServer","val bootStrapServer: String","com.github.nomisRev.kafka.AdminSettings.bootStrapServer"]},{"name":"val bootstrapServers: String","description":"com.github.nomisRev.kafka.ConsumerSettings.bootstrapServers","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/bootstrap-servers.html","searchKeys":["bootstrapServers","val bootstrapServers: String","com.github.nomisRev.kafka.ConsumerSettings.bootstrapServers"]},{"name":"val bootstrapServers: String","description":"com.github.nomisRev.kafka.ProducerSettings.bootstrapServers","location":"-kotlin-kafka/com.github.nomisRev.kafka/-producer-settings/bootstrap-servers.html","searchKeys":["bootstrapServers","val bootstrapServers: String","com.github.nomisRev.kafka.ProducerSettings.bootstrapServers"]},{"name":"val checkCrcs: Boolean = true","description":"com.github.nomisRev.kafka.ConsumerSettings.checkCrcs","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/check-crcs.html","searchKeys":["checkCrcs","val checkCrcs: Boolean = true","com.github.nomisRev.kafka.ConsumerSettings.checkCrcs"]},{"name":"val clientDnsLookup: ClientDnsLookup","description":"com.github.nomisRev.kafka.ConsumerSettings.clientDnsLookup","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/client-dns-lookup.html","searchKeys":["clientDnsLookup","val clientDnsLookup: ClientDnsLookup","com.github.nomisRev.kafka.ConsumerSettings.clientDnsLookup"]},{"name":"val clientId: String","description":"com.github.nomisRev.kafka.ConsumerSettings.clientId","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/client-id.html","searchKeys":["clientId","val clientId: String","com.github.nomisRev.kafka.ConsumerSettings.clientId"]},{"name":"val connectionsMaxIdle: Duration","description":"com.github.nomisRev.kafka.ConsumerSettings.connectionsMaxIdle","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/connections-max-idle.html","searchKeys":["connectionsMaxIdle","val connectionsMaxIdle: Duration","com.github.nomisRev.kafka.ConsumerSettings.connectionsMaxIdle"]},{"name":"val defaultApiTimeout: Duration","description":"com.github.nomisRev.kafka.ConsumerSettings.defaultApiTimeout","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/default-api-timeout.html","searchKeys":["defaultApiTimeout","val defaultApiTimeout: Duration","com.github.nomisRev.kafka.ConsumerSettings.defaultApiTimeout"]},{"name":"val enableAutoCommit: Boolean = true","description":"com.github.nomisRev.kafka.ConsumerSettings.enableAutoCommit","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/enable-auto-commit.html","searchKeys":["enableAutoCommit","val enableAutoCommit: Boolean = true","com.github.nomisRev.kafka.ConsumerSettings.enableAutoCommit"]},{"name":"val excludeInternalTopics: Boolean","description":"com.github.nomisRev.kafka.ConsumerSettings.excludeInternalTopics","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/exclude-internal-topics.html","searchKeys":["excludeInternalTopics","val excludeInternalTopics: Boolean","com.github.nomisRev.kafka.ConsumerSettings.excludeInternalTopics"]},{"name":"val fetchMaxBytes: Int","description":"com.github.nomisRev.kafka.ConsumerSettings.fetchMaxBytes","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/fetch-max-bytes.html","searchKeys":["fetchMaxBytes","val fetchMaxBytes: Int","com.github.nomisRev.kafka.ConsumerSettings.fetchMaxBytes"]},{"name":"val fetchMaxWait: Duration","description":"com.github.nomisRev.kafka.ConsumerSettings.fetchMaxWait","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/fetch-max-wait.html","searchKeys":["fetchMaxWait","val fetchMaxWait: Duration","com.github.nomisRev.kafka.ConsumerSettings.fetchMaxWait"]},{"name":"val fetchMinBytes: Int = 1","description":"com.github.nomisRev.kafka.ConsumerSettings.fetchMinBytes","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/fetch-min-bytes.html","searchKeys":["fetchMinBytes","val fetchMinBytes: Int = 1","com.github.nomisRev.kafka.ConsumerSettings.fetchMinBytes"]},{"name":"val groupId: String","description":"com.github.nomisRev.kafka.ConsumerSettings.groupId","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/group-id.html","searchKeys":["groupId","val groupId: String","com.github.nomisRev.kafka.ConsumerSettings.groupId"]},{"name":"val heartbeatInterval: Duration","description":"com.github.nomisRev.kafka.ConsumerSettings.heartbeatInterval","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/heartbeat-interval.html","searchKeys":["heartbeatInterval","val heartbeatInterval: Duration","com.github.nomisRev.kafka.ConsumerSettings.heartbeatInterval"]},{"name":"val interceptorClasses: List<Class<*>>","description":"com.github.nomisRev.kafka.ConsumerSettings.interceptorClasses","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/interceptor-classes.html","searchKeys":["interceptorClasses","val interceptorClasses: List<Class<*>>","com.github.nomisRev.kafka.ConsumerSettings.interceptorClasses"]},{"name":"val keyDeserializer: Deserializer<K>","description":"com.github.nomisRev.kafka.ConsumerSettings.keyDeserializer","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/key-deserializer.html","searchKeys":["keyDeserializer","val keyDeserializer: Deserializer<K>","com.github.nomisRev.kafka.ConsumerSettings.keyDeserializer"]},{"name":"val keyDeserializer: Serializer<K>","description":"com.github.nomisRev.kafka.ProducerSettings.keyDeserializer","location":"-kotlin-kafka/com.github.nomisRev.kafka/-producer-settings/key-deserializer.html","searchKeys":["keyDeserializer","val keyDeserializer: Serializer<K>","com.github.nomisRev.kafka.ProducerSettings.keyDeserializer"]},{"name":"val maxPartitionFetchBytes: Int","description":"com.github.nomisRev.kafka.ConsumerSettings.maxPartitionFetchBytes","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/max-partition-fetch-bytes.html","searchKeys":["maxPartitionFetchBytes","val maxPartitionFetchBytes: Int","com.github.nomisRev.kafka.ConsumerSettings.maxPartitionFetchBytes"]},{"name":"val maxPollInterval: Duration","description":"com.github.nomisRev.kafka.ConsumerSettings.maxPollInterval","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/max-poll-interval.html","searchKeys":["maxPollInterval","val maxPollInterval: Duration","com.github.nomisRev.kafka.ConsumerSettings.maxPollInterval"]},{"name":"val maxPollRecords: Int = 500","description":"com.github.nomisRev.kafka.ConsumerSettings.maxPollRecords","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/max-poll-records.html","searchKeys":["maxPollRecords","val maxPollRecords: Int = 500","com.github.nomisRev.kafka.ConsumerSettings.maxPollRecords"]},{"name":"val metadataMaxAge: Long","description":"com.github.nomisRev.kafka.ConsumerSettings.metadataMaxAge","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/metadata-max-age.html","searchKeys":["metadataMaxAge","val metadataMaxAge: Long","com.github.nomisRev.kafka.ConsumerSettings.metadataMaxAge"]},{"name":"val metricsNumSamples: Int = 2","description":"com.github.nomisRev.kafka.ConsumerSettings.metricsNumSamples","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/metrics-num-samples.html","searchKeys":["metricsNumSamples","val metricsNumSamples: Int = 2","com.github.nomisRev.kafka.ConsumerSettings.metricsNumSamples"]},{"name":"val metricsRecordingLevel: Sensor.RecordingLevel","description":"com.github.nomisRev.kafka.ConsumerSettings.metricsRecordingLevel","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/metrics-recording-level.html","searchKeys":["metricsRecordingLevel","val metricsRecordingLevel: Sensor.RecordingLevel","com.github.nomisRev.kafka.ConsumerSettings.metricsRecordingLevel"]},{"name":"val metricsReporterClasses: List<Class<*>>","description":"com.github.nomisRev.kafka.ConsumerSettings.metricsReporterClasses","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/metrics-reporter-classes.html","searchKeys":["metricsReporterClasses","val metricsReporterClasses: List<Class<*>>","com.github.nomisRev.kafka.ConsumerSettings.metricsReporterClasses"]},{"name":"val metricsSampleWindow: Duration","description":"com.github.nomisRev.kafka.ConsumerSettings.metricsSampleWindow","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/metrics-sample-window.html","searchKeys":["metricsSampleWindow","val metricsSampleWindow: Duration","com.github.nomisRev.kafka.ConsumerSettings.metricsSampleWindow"]},{"name":"val partitionAssignmentStrategy: List<Class<*>>","description":"com.github.nomisRev.kafka.ConsumerSettings.partitionAssignmentStrategy","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/partition-assignment-strategy.html","searchKeys":["partitionAssignmentStrategy","val partitionAssignmentStrategy: List<Class<*>>","com.github.nomisRev.kafka.ConsumerSettings.partitionAssignmentStrategy"]},{"name":"val receiveBuffer: Int","description":"com.github.nomisRev.kafka.ConsumerSettings.receiveBuffer","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/receive-buffer.html","searchKeys":["receiveBuffer","val receiveBuffer: Int","com.github.nomisRev.kafka.ConsumerSettings.receiveBuffer"]},{"name":"val reconnectBackoff: Duration","description":"com.github.nomisRev.kafka.ConsumerSettings.reconnectBackoff","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/reconnect-backoff.html","searchKeys":["reconnectBackoff","val reconnectBackoff: Duration","com.github.nomisRev.kafka.ConsumerSettings.reconnectBackoff"]},{"name":"val reconnectBackoffMax: Duration","description":"com.github.nomisRev.kafka.ConsumerSettings.reconnectBackoffMax","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/reconnect-backoff-max.html","searchKeys":["reconnectBackoffMax","val reconnectBackoffMax: Duration","com.github.nomisRev.kafka.ConsumerSettings.reconnectBackoffMax"]},{"name":"val requestTimeout: Duration","description":"com.github.nomisRev.kafka.ConsumerSettings.requestTimeout","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/request-timeout.html","searchKeys":["requestTimeout","val requestTimeout: Duration","com.github.nomisRev.kafka.ConsumerSettings.requestTimeout"]},{"name":"val retryBackoff: Duration","description":"com.github.nomisRev.kafka.ConsumerSettings.retryBackoff","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/retry-backoff.html","searchKeys":["retryBackoff","val retryBackoff: Duration","com.github.nomisRev.kafka.ConsumerSettings.retryBackoff"]},{"name":"val sendBuffer: Int","description":"com.github.nomisRev.kafka.ConsumerSettings.sendBuffer","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/send-buffer.html","searchKeys":["sendBuffer","val sendBuffer: Int","com.github.nomisRev.kafka.ConsumerSettings.sendBuffer"]},{"name":"val sessionTimeOut: Duration","description":"com.github.nomisRev.kafka.ConsumerSettings.sessionTimeOut","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/session-time-out.html","searchKeys":["sessionTimeOut","val sessionTimeOut: Duration","com.github.nomisRev.kafka.ConsumerSettings.sessionTimeOut"]},{"name":"val value: String","description":"com.github.nomisRev.kafka.Acks.value","location":"-kotlin-kafka/com.github.nomisRev.kafka/-acks/value.html","searchKeys":["value","val value: String","com.github.nomisRev.kafka.Acks.value"]},{"name":"val value: String","description":"com.github.nomisRev.kafka.AutoOffsetReset.value","location":"-kotlin-kafka/com.github.nomisRev.kafka/-auto-offset-reset/value.html","searchKeys":["value","val value: String","com.github.nomisRev.kafka.AutoOffsetReset.value"]},{"name":"val valueDeserializer: Deserializer<V>","description":"com.github.nomisRev.kafka.ConsumerSettings.valueDeserializer","location":"-kotlin-kafka/com.github.nomisRev.kafka/-consumer-settings/value-deserializer.html","searchKeys":["valueDeserializer","val valueDeserializer: Deserializer<V>","com.github.nomisRev.kafka.ConsumerSettings.valueDeserializer"]},{"name":"val valueDeserializer: Serializer<V>","description":"com.github.nomisRev.kafka.ProducerSettings.valueDeserializer","location":"-kotlin-kafka/com.github.nomisRev.kafka/-producer-settings/value-deserializer.html","searchKeys":["valueDeserializer","val valueDeserializer: Serializer<V>","com.github.nomisRev.kafka.ProducerSettings.valueDeserializer"]}]
